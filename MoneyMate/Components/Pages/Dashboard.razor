@page "/dashboard"
@using MoneyMate.Services
@using MoneyMate.Models
@inject TransactionService TransactionService
@inject StateService StateService
@inject NavigationManager NavigationManager
@inject CsvService CsvService

<div class="container-fluid p-4">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="mb-0">Dashboard</h2>
                    <p class="text-muted">Welcome back, @StateService.CurrentUsername!</p>
                </div>
                <div>
                    <button class="btn btn-primary me-2" @onclick="() => ShowAddTransaction = true">
                        <i class="fas fa-plus"></i> Add Transaction
                    </button>
                    <button class="btn btn-outline-danger" @onclick="Logout">
                        <i class="fas fa-sign-out-alt"></i> Logout
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Date Filter Section -->
    <div class="card mb-4 shadow-sm">
        <div class="card-body">
            <h5 class="card-title">Date Filter</h5>
            <div class="row g-3 align-items-center">
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-text bg-light">From</span>
                        <input type="date" class="form-control" @bind="StartDate">
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-text bg-light">To</span>
                        <input type="date" class="form-control" @bind="EndDate">
                    </div>
                </div>
                <div class="col-md-4">
                    <button class="btn btn-primary me-2" @onclick="ApplyFilter">
                        <i class="fas fa-filter"></i> Apply Filter
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="ResetFilter">
                        <i class="fas fa-undo"></i> Reset
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-success text-white shadow-sm h-100">
                <div class="card-body">
                    <h6 class="card-subtitle mb-2">Total Income</h6>
                    <h3 class="card-title mb-0">@UserCurrency @(Summary?.TotalInflowAmount.ToString("N2") ?? "0.00")</h3>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-danger text-white shadow-sm h-100">
                <div class="card-body">
                    <h6 class="card-subtitle mb-2">Total Expenses</h6>
                    <h3 class="card-title mb-0">@UserCurrency @(Summary?.TotalOutflowAmount.ToString("N2") ?? "0.00")</h3>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white shadow-sm h-100">
                <div class="card-body">
                    <h6 class="card-subtitle mb-2">Current Balance</h6>
                    <h3 class="card-title mb-0">@UserCurrency @(Summary?.Balance.ToString("N2") ?? "0.00")</h3>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning shadow-sm h-100">
                <div class="card-body">
                    <h6 class="card-subtitle mb-2">Pending Debts</h6>
                    <h3 class="card-title mb-0">@UserCurrency @(Summary?.RemainingDebt.ToString("N2") ?? "0.00")</h3>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Transactions and Charts Section -->
    <div class="row mb-4">
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Recent Transactions</h5>
                </div>
                <div class="card-body">
                    <!-- Transaction table will go here in next step -->
                    <p class="text-muted">No transactions found.</p>
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="card shadow-sm">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Statistics</h5>
                </div>
                <div class="card-body">
                    <!-- Charts will go here in next step -->
                    <p class="text-muted">No data available.</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private TransactionSummary Summary { get; set; } = new();
    private DateTime? StartDate { get; set; }
    private DateTime? EndDate { get; set; }
    private bool ShowAddTransaction { get; set; }
    private string ErrorMessage { get; set; } = string.Empty;
    private string UserCurrency { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(StateService.CurrentUsername))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var user = await CsvService.GetUserAsync(StateService.CurrentUsername);
        if (user != null)
        {
            UserCurrency = user.PreferredCurrency;
        }

        await LoadDashboard();
    }

    private void Logout()
    {
        StateService.CurrentUsername = string.Empty;
        NavigationManager.NavigateTo("/login");
    }

    private async Task ApplyFilter()
    {
        if (StartDate.HasValue && EndDate.HasValue && StartDate > EndDate)
        {
            ErrorMessage = "Start date cannot be after end date";
            return;
        }
        await LoadDashboard();
    }

    private async Task ResetFilter()
    {
        StartDate = null;
        EndDate = null;
        await LoadDashboard();
    }

    private async Task LoadDashboard()
    {
        try
        {
            Summary = await TransactionService.GetTransactionSummaryAsync(StateService.CurrentUsername, StartDate, EndDate);
        }
        catch (Exception ex)
        {
            ErrorMessage = "Error loading dashboard data.";
            Console.WriteLine($"Dashboard error: {ex.Message}");
        }
    }
}