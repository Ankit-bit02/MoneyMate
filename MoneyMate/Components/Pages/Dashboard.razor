@using System.Linq
@page "/dashboard"
@using MoneyMate.Services
@using MoneyMate.Models
@inject TransactionService TransactionService
@inject StateService StateService
@inject NavigationManager NavigationManager
@inject CsvService CsvService

<div class="container-fluid p-4">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="mb-0">Dashboard</h2>
                    <p class="text-muted">Welcome, @StateService.CurrentUsername!</p>
                </div>
                <div>
                    <button class="btn btn-primary me-2" @onclick="@(() => ShowAddTransaction = true)">
                        <span class="fas fa-plus"></span> Add Transaction
                    </button>
                    <button class="btn btn-secondary me-2" @onclick="@(() => NavigationManager.NavigateTo("/transactions"))">
                        <span class="fas fa-list"></span> View All Transactions
                    </button>
                    <button class="btn btn-info me-2 text-white" @onclick="@(() => NavigationManager.NavigateTo("/debts"))">
                        <span class="fas fa-money-bill"></span> Manage Debts
                    </button>
                    <button class="btn btn-outline-danger" @onclick="Logout">
                        <span class="fas fa-sign-out-alt"></span> Logout
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Date Filter Section -->
    <div class="card mb-4 shadow-sm">
        <div class="card-body">
            <h5 class="card-title">Date Filter</h5>
            <div class="row g-3 align-items-center">
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-text bg-light">From</span>
                        <input type="date" class="form-control" @bind="StartDate">
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-text bg-light">To</span>
                        <input type="date" class="form-control" @bind="EndDate">
                    </div>
                </div>
                <div class="col-md-4">
                    <button class="btn btn-primary me-2" @onclick="ApplyFilter">
                        <span class="fas fa-filter"></span> Apply Filter
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="ResetFilter">
                        <span class="fas fa-undo"></span> Reset
                    </button>
                </div>
            </div>
        </div>
    </div>
    <FilteredTransactionsModal 
    Show="ShowFilteredTransactions"
    ShowChanged="(value) => ShowFilteredTransactions = value"
    Transactions="FilteredTransactions"
    UserCurrency="@UserCurrency"
    StartDate="StartDate"
    EndDate="EndDate" />

    <!-- Summary Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-success text-white shadow-sm h-100">
                <div class="card-body">
                    <h6 class="card-subtitle mb-2">Total Income</h6>
                    <h3 class="card-title mb-0">@UserCurrency @(Summary?.TotalInflowAmount.ToString("N2") ?? "0.00")</h3>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-danger text-white shadow-sm h-100">
                <div class="card-body">
                    <h6 class="card-subtitle mb-2">Total Expenses</h6>
                    <h3 class="card-title mb-0">@UserCurrency @(Summary?.TotalOutflowAmount.ToString("N2") ?? "0.00")</h3>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white shadow-sm h-100">
                <div class="card-body">
                    <h6 class="card-subtitle mb-2">Current Balance</h6>
                    <h3 class="card-title mb-0">@UserCurrency @(Summary?.Balance.ToString("N2") ?? "0.00")</h3>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning shadow-sm h-100">
                <div class="card-body">
                    <h6 class="card-subtitle mb-2">Pending Debts</h6>
                    <h3 class="card-title mb-0">@UserCurrency @(Summary?.RemainingDebt.ToString("N2") ?? "0.00")</h3>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content Section -->
    <div class="row">
        <!-- Recent Transactions Section -->
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Recent Transactions</h5>
                </div>
                <div class="card-body">
                    @if (Summary?.Transactions != null && Summary.Transactions.Any())
                    {
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Title</th>
                                        <th>Type</th>
                                        <th class="text-end">Amount</th>
                                        <th>Notes</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var transaction in Summary.Transactions)
                                    {
                                        <tr>
                                            <td>@transaction.Date.ToShortDateString()</td>
                                            <td>@transaction.Title</td>
                                            <td>
                                                <span class="badge @GetTransactionBadgeClass(transaction.Type)">
                                                    @transaction.Type
                                                </span>
                                            </td>
                                            <td class="text-end">@UserCurrency @transaction.Amount.ToString("N2")</td>
                                            <td>@transaction.Note</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No transactions found.</p>
                    }
                </div>
            </div>
        </div>

        <!-- Statistics Section -->
        <div class="col-lg-4">
            <div class="card shadow-sm">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Summary</h5>
                </div>
                <div class="card-body">
                    @if (Summary != null)
                    {
                        <div class="table-responsive">
                            <table class="table">
                                <tbody>
                                    <tr>
                                        <td>Total Transactions</td>
                                        <td class="text-end fw-bold">@Summary.TransactionCount</td>
                                    </tr>
                                    <tr>
                                        <td>This Month</td>
                                        <td class="text-end fw-bold">@Summary.CurrentMonthTransactions</td>
                                    </tr>
                                    <tr>
                                        <td>Pending Debts</td>
                                        <td class="text-end fw-bold">@Summary.PendingDebts.Count</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No data available.</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show mb-4" role="alert">
        @ErrorMessage
        <button type="button" class="btn-close" @onclick="() => ErrorMessage = string.Empty"></button>
    </div>
}
@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div class="alert alert-success alert-dismissible fade show mb-4" role="alert">
        @SuccessMessage
        <button type="button" class="btn-close" @onclick="() => SuccessMessage = string.Empty"></button>
    </div>
}

<AddTransactionModal Show="ShowAddTransaction"
                     ShowChanged="(value) => ShowAddTransaction = value"
                     UserCurrency="@UserCurrency"
                     OnTransactionAdded="OnTransactionAdded" />




@code {
    private TransactionSummary Summary { get; set; } = new();
    private DateTime? StartDate { get; set; }
    private DateTime? EndDate { get; set; }
    private bool ShowAddTransaction { get; set; }
    private string ErrorMessage { get; set; } = string.Empty;
    private string UserCurrency { get; set; } = string.Empty;
    private string SuccessMessage { get; set; } = string.Empty;
    private bool ShowFilteredTransactions { get; set; }
    private List<Transaction> FilteredTransactions { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(StateService.CurrentUsername))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var user = await CsvService.GetUserAsync(StateService.CurrentUsername);
        if (user != null)
        {
            UserCurrency = user.PreferredCurrency;
        }

        await LoadDashboard();
    }

    private void Logout()
    {
        StateService.CurrentUsername = string.Empty;
        NavigationManager.NavigateTo("/login");
    }

    private void ApplyFilter()
    {
        try
        {
            if (StartDate.HasValue && EndDate.HasValue && StartDate > EndDate)
            {
                ErrorMessage = "Start date cannot be after end date";
                return;
            }

            var queryString = $"?StartDate={StartDate?.ToString("yyyy-MM-dd")}&EndDate={EndDate?.ToString("yyyy-MM-dd")}";
            NavigationManager.NavigateTo($"/filtered-transactions{queryString}");
        }
        catch (Exception ex)
        {
            ErrorMessage = "Error applying date filter.";
            Console.WriteLine($"Filter error: {ex.Message}");
        }
    }

    private async Task ResetFilter()
    {
        StartDate = null;
        EndDate = null;
        await LoadDashboard();
    }

    private async Task LoadDashboard()
    {
        try
        {
            Summary = await TransactionService.GetTransactionSummaryAsync(StateService.CurrentUsername, StartDate, EndDate);
            if (!string.IsNullOrEmpty(SuccessMessage))
            {
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Error loading dashboard data.";
            Console.WriteLine($"Dashboard error: {ex.Message}");
        }
    }

    private async Task OnTransactionAdded()
    {
        try
        {
            SuccessMessage = "Transaction added successfully!";
            ErrorMessage = string.Empty;
            await LoadDashboard();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = "Error updating dashboard after adding transaction.";
            Console.WriteLine($"Error in OnTransactionAdded: {ex.Message}");
        }
    }

    private string GetTransactionBadgeClass(TransactionType type)
    {
        return type switch
        {
            TransactionType.Credit => "bg-success",
            TransactionType.Debit => "bg-danger",
            TransactionType.Debt => "bg-warning",
            _ => "bg-secondary"
        };
    }


}