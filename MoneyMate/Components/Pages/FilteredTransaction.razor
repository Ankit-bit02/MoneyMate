@page "/filtered-transactions"
@using MoneyMate.Services
@using MoneyMate.Models
@inject TransactionService TransactionService
@inject CsvService CsvService
@inject StateService StateService
@inject NavigationManager NavigationManager

<div class="container-fluid p-4">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="mb-0">Filtered Transactions</h2>
                    <p class="text-muted">
                        @(StartDate?.ToShortDateString() ?? "Start") - @(EndDate?.ToShortDateString() ?? "End")
                    </p>
                </div>
                <button class="btn btn-primary" @onclick="NavigateToDashboard">
                    Back to Dashboard
                </button>
            </div>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-body">
            @if (Transactions != null && Transactions.Any())
            {
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Title</th>
                                <th>Type</th>
                                <th class="text-end">Amount</th>
                                <th>Notes</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var transaction in Transactions)
                            {
                                <tr>
                                    <td>@transaction.Date.ToShortDateString()</td>
                                    <td>@transaction.Title</td>
                                    <td>
                                        <span class="badge @GetTransactionBadgeClass(transaction.Type)">
                                            @transaction.Type
                                        </span>
                                    </td>
                                    <td class="text-end">@UserCurrency @transaction.Amount.ToString("N2")</td>
                                    <td>@transaction.Note</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <p class="text-muted">No transactions found for the selected date range.</p>
            }
        </div>
    </div>
</div>

@code {

    // Parameters supplied from query string
    [Parameter]
    [SupplyParameterFromQuery]
    public DateTime? StartDate { get; set; } // Start date for filtering

    [Parameter]
    [SupplyParameterFromQuery]
    public DateTime? EndDate { get; set; }  // End date for filtering

    // Component state properties
    private List<Transaction> Transactions { get; set; } = new(); // List of filtered transactions
    private string UserCurrency { get; set; } = string.Empty;  // User's preferred currency

    // Initialize component
    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(StateService.CurrentUsername))
        {
            // Redirect to login if user not authenticated
            NavigationManager.NavigateTo("/login");
            return;
        }


        // Get user's preferred currency
        var user = await CsvService.GetUserAsync(StateService.CurrentUsername);
        if (user != null)
        {
            UserCurrency = user.PreferredCurrency;
        }

        await LoadTransactions();  // Load filtered transactions
    }

    // Load transactions based on date range
    private async Task LoadTransactions()
    {
        Transactions = await TransactionService.GetUserTransactionsAsync(
            StateService.CurrentUsername,
            StartDate,
            EndDate
        );
    }

    private void NavigateToDashboard()  // Navigate back to dashboard
    {
        NavigationManager.NavigateTo("/dashboard");
    }


    // Get appropriate CSS class for transaction type badge
    private string GetTransactionBadgeClass(TransactionType type)
    {
        return type switch
        {
            TransactionType.Credit => "bg-success",
            TransactionType.Debit => "bg-danger",
            TransactionType.Debt => "bg-warning",
            _ => "bg-secondary"
        };
    }
}